# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.18.3"

default_platform :ios
application_identifiers = [
    "io.joedaniels.apollo.*",
    "io.joedaniels.apollo.mobile",
    "io.joedaniels.apollo.mobile.watchkitapp",
    "io.joedaniels.apollo.mobile.watchkitapp.watchkitextension",
#"io.joedaniels.apollo.app",
#"io.joedaniels.apollo.service",
#"io.joedaniels.apollo.app.monitor",
#"io.joedaniels.apollo.app.ApolloPickaxe"
]


def with_captured_stdout
  begin
    old_stdout = $stdout
    $stdout = StringIO.new('/dev/null', 'w')
    $stdout.sync = true
    $stdout.flush()
    yield
      # $stdout.string
  ensure
    $stdout = old_stdout
    puts "***   [ redacted ]   ***".blue
  end
end

platform :ios do
  before_all do
    xcversion(version: "8.2.1") # Selects Xcode 8.1.0
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."

    # carthage
  end
  desc "CI Script"
  lane :ciTests do
    certificates
    # gym(scheme:"Apollo")
    # gym(scheme:"ApolloIOS")
    gym(scheme: "ApolloM", export_method: 'app-store')
    gym(scheme: "ApolloX")
    gym(scheme: "ApolloService")
    gym(scheme: "ApolloPickaxe")
    gym(scheme: "ApolloMonitor")
    # gym(scheme:"ApolloMicro")
  end
  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Certs"
  lane :certificates do
    ["development", "adhoc", "appstore"].each { |x|
      application_identifiers.each { |y|
        with_captured_stdout {
          match(app_identifier: y, type: x)
        }
      }
    }
  end

  desc "checkout certs"
  lane :certificates_ro do
    ["development", "adhoc", "appstore"].each { |x|
      application_identifiers.each { |y|
        with_captured_stdout {
          match(app_identifier: y, type: x, readonly: true)
        }
      }
    }
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    gym(scheme: "ApolloM") # Build your app - more options available
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  # desc "Deploy a new version to the App Store"
  # lane :release do
  #   # match(type: "appstore")
  #   # snapshot
  #   gym(scheme: "ApolloM") # Build your app - more options available
  #   deliver(force: true)
  #   # frameit
  # end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
